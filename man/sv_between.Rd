% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rules.R
\name{sv_between}
\alias{sv_between}
\title{Validate that a field is a number bounded by minimum and maximum values}
\usage{
sv_between(
  left,
  right,
  inclusive = c(TRUE, TRUE),
  allow_na = FALSE,
  allow_nan = FALSE,
  message = NULL
)
}
\arguments{
\item{left, right}{The left and right boundary values. Inclusively for each of
the boundaries is set with the \code{inclusive} argument; the defaults are set
for inclusive bounds.}

\item{inclusive}{A two-element logical vector that indicates whether the
\code{left} and \code{right} bounds, respectively, should be inclusive. Both bounds
are by default are inclusive, using \code{c(TRUE, TRUE)}.}

\item{allow_na, allow_nan}{If \code{FALSE} (the default for both options), then any
\code{NA} or \code{NaN} element will cause validation to fail.}

\item{message}{The validation error message to use if a value fails to match
the rule. By default, this is generic message provided by \strong{shinyvalidate}
but a custom message can be provided here.}
}
\value{
A function suitable for using as an
\code{\link[=InputValidator]{InputValidator$add_rule()}} rule.
}
\description{
\code{sv_numeric} and \code{sv_integer} validate that a field \code{is.numeric} and
\code{is.integer}, respectively. By default, only a single, finite, not-missing,
valid number/integer is allowed, but each of those criteria can be controlled
via arguments.
}
\examples{
# Ignore withReactiveDomain(), it's just required to get this example to run
# outside of Shiny
shiny::withReactiveDomain(shiny::MockShinySession$new(), {

  iv <- InputValidator$new()

  iv$add_rule("count", sv_between(10, 10000))
  iv$add_rule("count", ~if (. <= 0) "A positive value is required")

})
}
