% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rules.R
\name{sv_required}
\alias{sv_required}
\title{Validate that the field is present}
\usage{
sv_required(message = "Required", test = sv_has_value)
}
\arguments{
\item{message}{The validation error message to be displayed if the test does
not pass.}

\item{test}{A single-argument function, or single-sided formula (using \code{.} to
access the value to test), that returns \code{TRUE} for success and \code{FALSE} for
failure.}
}
\value{
A function suitable for using as an
\code{\link[=InputValidator]{InputValidator$add_rule()}} rule.
}
\description{
Call \code{sv_required()} to generate a validation function for checking whether
an input value is present. By default, the distinction for whether the input
is available is governed through use of the \code{\link[=sv_has_value]{sv_has_value()}} function, which
is based on the rules contained in the \code{\link[shiny:req]{shiny::isTruthy()}} function (but
tweaked for validation purposes).
}
\examples{
# Ignore withReactiveDomain(), it's just required to get this example to run
# outside of Shiny
shiny::withReactiveDomain(shiny::MockShinySession$new(), {

  iv <- InputValidator$new()

  # Basic usage: ensure that `input$title` is present, and return a terse
  # validation message if not
  iv$add_rule("title", sv_required())

  # You can easily provide a custom message to display
  iv$add_rule("email", sv_required("An email is required"))

  # Provide a `test` argument to change the definition of "is present";
  # in this example, any non-NULL value will be accepted.
  iv$add_rule("choices", sv_required(test = is.null))

})
}
